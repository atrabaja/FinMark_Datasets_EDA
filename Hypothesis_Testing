# Import Libraries
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import silhouette_score
import streamlit as st

# Set the environment variable for the number of threads before importing sklearn
os.environ["OMP_NUM_THREADS"] = "5"  # Set this to a lower number to see if it helps

# Load datasets
df1 = pd.read_csv("C:\\Users\\Angel Rabaja\\Downloads\\MO-IT125 Homework_ Data Preprocessing of Machine Learning Solution Project Dataset BSIT-H3103 Mondero, GV., Rabaja, A., Vicente, JB. - cleaned_customer_demographics.csv")
df2 = pd.read_csv("C:\\Users\\Angel Rabaja\\Downloads\\MO-IT125 Homework_ Data Preprocessing of Machine Learning Solution Project Dataset BSIT-H3103 Mondero, GV., Rabaja, A., Vicente, JB. - cleaned_customer_transactions.csv")
df3 = pd.read_csv("C:\\Users\\Angel Rabaja\\Downloads\\MO-IT125 Homework_ Data Preprocessing of Machine Learning Solution Project Dataset BSIT-H3103 Mondero, GV., Rabaja, A., Vicente, JB. - cleaned_social_media_interaction.csv")

# Set display options to show the full DataFrame
pd.set_option('display.max_columns', None)  # Show all columns
pd.set_option('display.expand_frame_repr', False)  # Do not wrap rows

# Check the first few rows of each DataFrame
print("Customer Demographics DataFrame:")
print(df1.head())
print("\nCustomer Transactions DataFrame:")
print(df2.head())
print("\nSocial Media Interactions DataFrame:")
print(df3.head())

# Check for missing values and data types
print("\nCustomer Demographics Info:")
print(df1.info())
print("\nCustomer Transactions Info:")
print(df2.info())
print("\nSocial Media Interactions Info:")
print(df3.info())

# Merge Customer Demographics with Customer Transactions
merged_df = pd.merge(df1, df2, on='Customer ID', how='inner')  # Using 'inner' to keep only matching records
print("\nMerged DataFrame after merging Customer Demographics with Customer Transactions:")
print(merged_df.head())

# Merge the resulting DataFrame with Social Media Interactions
merged_df = pd.merge(merged_df, df3, on='Customer ID', how='inner')
print("\nFinal Merged DataFrame after adding Social Media Interactions:")
print(merged_df.head())

# Check for missing values in the final merged DataFrame
print("\nMissing Values in Final Merged DataFrame:")
missing_values_final = merged_df.isnull().sum()
print(missing_values_final[missing_values_final > 0])  # Display only columns with missing values

# Function to parse dates with multiple formats
def parse_date(date_str):
    for fmt in ('%Y-%m-%d', '%d-%m-%Y', '%m-%d-%Y', '%Y/%m/%d', '%d/%m/%Y', '%m/%d/%Y', '%B %d, %Y', '%d %B %Y'):
        try:
            return pd.to_datetime(date_str, format=fmt)
        except (ValueError, TypeError):
            continue
    return pd.NaT

# Convert date columns
for date_col in ['Sign Up Date', 'Transaction Date', 'Interaction Date']:
    if date_col in merged_df.columns:
        merged_df[date_col] = merged_df[date_col].apply(parse_date)

# Filter out data for RFM analysis
latest_date = merged_df['Transaction Date'].max() + pd.Timedelta(days=1)

# Calculate RFM metrics
if 'Transaction Date' in merged_df.columns and 'Amount' in merged_df.columns:
    # Set a reference date for recency calculation
    reference_date = merged_df['Transaction Date'].max()

    # Calculate Recency, Frequency, and Monetary (RFM)
    rfm_df = merged_df.groupby('Customer ID').agg({
        'Transaction Date': lambda x: (reference_date - x.max()).days,  # Recency
        'Customer ID': 'count',  # Frequency
        'Amount': 'sum'  # Monetary
    }).rename(columns={
        'Transaction Date': 'Recency',
        'Customer ID': 'Frequency',
        'Amount': 'Monetary'
    }).reset_index()

    print("\nRFM Metrics:")
    print(rfm_df.head())

    # Apply log transformation to Recency, Frequency, and Monetary
    if 'Monetary' in rfm_df.columns:
        rfm_df['Recency_log'] = np.log1p(rfm_df['Recency'])
        rfm_df['Frequency_log'] = np.log1p(rfm_df['Frequency'])
        rfm_df['Monetary_log'] = np.log1p(rfm_df['Monetary'])

        # Print transformed columns to verify
        print("RFM DataFrame with log transformations:")
        print(rfm_df[['Recency_log', 'Frequency_log', 'Monetary_log']].head())
    else:
        print("Error: 'Monetary' column not found in rfm_df.")

    # Split data into training and testing sets
    X = rfm_df[['Recency', 'Frequency', 'Monetary']]
    y = rfm_df['Monetary']  # Assuming we want to predict the Monetary value

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Create a Random Forest Regressor pipeline
    model = Pipeline(steps=[
        ('scaler', StandardScaler()), 
        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
    ])

    # Train the model
    model.fit(X_train, y_train)

    # Predict and evaluate
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f'Mean Absolute Error: {mae}')
    print(f'R^2 Score: {r2}')

else:
    print("Required columns for RFM calculation are missing.")

# Check if the 'Age' column exists
if 'Age' in df1.columns:
    # We can use Age directly as a feature
    print("Using Age column for feature engineering.")

    # Re-merge the datasets to include the Age feature
    merged_df = pd.merge(merged_df, df1[['Customer ID', 'Age']], on='Customer ID', how='inner')
else:
    print("Error: 'Age' column not found in Customer Demographics data.")

# Calculate Frequency of Transactions
transaction_counts = df2.groupby('Customer ID')['Transaction Date'].count().reset_index(name='Transaction Frequency')

# Calculate Average Transaction Value
average_transaction_value = df2.groupby('Customer ID')['Amount'].mean().reset_index(name='Average Transaction Value')

# Get the Last Purchase Date
last_purchase_date = df2.groupby('Customer ID')['Transaction Date'].max().reset_index(name='Last Purchase Date')

# Merge these new features into the merged DataFrame
merged_df = merged_df.merge(transaction_counts, on='Customer ID', how='left')
merged_df = merged_df.merge(average_transaction_value, on='Customer ID', how='left')
merged_df = merged_df.merge(last_purchase_date, on='Customer ID', how='left')

# Calculate Time since Last Purchase
if 'Last Purchase Date' in merged_df.columns:
    merged_df['Last Purchase Date'] = pd.to_datetime(merged_df['Last Purchase Date'])
    merged_df['Time Since Last Purchase'] = (pd.to_datetime('today') - merged_df['Last Purchase Date']).dt.days

# Display the updated DataFrame
print("\nMerged DataFrame with additional features:")
print(merged_df.head())

# Select RFM features for clustering
rfm_clustering_data = rfm_df[['Recency', 'Frequency', 'Monetary']]

# Determine the optimal number of clusters using the Elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(rfm_clustering_data)
    wcss.append(kmeans.inertia_)

# Plot the Elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')  # Within-cluster sum of squares
plt.grid()
plt.savefig('elbow_method_plot.png')  # Save the Elbow plot as an image
plt.show()

# Assuming the optimal number of clusters found is 4
optimal_k = 4
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
rfm_df['Cluster'] = kmeans.fit_predict(rfm_clustering_data)

# Display the RFM DataFrame with cluster labels
print("\nRFM DataFrame with Cluster Labels:")
print(rfm_df.head())

# Analyze the clusters by calculating the mean RFM metrics for each cluster
cluster_analysis = rfm_df.groupby('Cluster').agg({
    'Recency': 'mean',
    'Frequency': 'mean',
    'Monetary': 'mean',
    'Recency_log': 'mean',
    'Frequency_log': 'mean',
    'Monetary_log': 'mean'
}).reset_index()

print("\nCluster Analysis:")
print(cluster_analysis)

# Visualize the clusters
plt.figure(figsize=(12, 8))
sns.scatterplot(data=rfm_df, x='Recency', y='Monetary', hue='Cluster', palette='viridis', s=100)
plt.title('RFM Clusters Visualization')
plt.xlabel('Recency')
plt.ylabel('Monetary')
plt.legend(title='Cluster')
plt.savefig('rfm_clusters_visualization.png')  # Save the cluster visualization as an image
plt.show()

# Create a Linear Regression model pipeline
linear_model = Pipeline(steps=[
    ('scaler', StandardScaler()), 
    ('regressor', LinearRegression())
])

# Train the Linear Regression model
linear_model.fit(X_train, y_train)

# Predict and evaluate using Linear Regression
y_pred_linear = linear_model.predict(X_test)
mae_linear = mean_absolute_error(y_test, y_pred_linear)
r2_linear = r2_score(y_test, y_pred_linear)
print(f'Linear Regression - Mean Absolute Error: {mae_linear}')
print(f'Linear Regression - R^2 Score: {r2_linear}')

# Create a Gradient Boosting Regressor pipeline
gb_model = Pipeline(steps=[
    ('scaler', StandardScaler()), 
    ('regressor', GradientBoostingRegressor(n_estimators=100, random_state=42))
])

# Train the Gradient Boosting model
gb_model.fit(X_train, y_train)

# Predict and evaluate using Gradient Boosting
y_pred_gb = gb_model.predict(X_test)
mae_gb = mean_absolute_error(y_test, y_pred_gb)
r2_gb = r2_score(y_test, y_pred_gb)
print(f'Gradient Boosting - Mean Absolute Error: {mae_gb}')
print(f'Gradient Boosting - R^2 Score: {r2_gb}')

# Optionally, export the final merged DataFrame with additional features for further analysis
output_file_path = "C:\\Users\\Angel Rabaja\\Downloads\\final_merged_data.csv"
merged_df.to_csv(output_file_path, index=False)
print(f"Final merged DataFrame saved to: {output_file_path}")

# Calculate silhouette score
sil_score = silhouette_score(rfm_clustering_data, rfm_df['Cluster'])
print(f'Silhouette Score: {sil_score}')

print("Analysis completed. Plots and analysis results saved.")

from scipy import stats  # Import for hypothesis testing

# T-test: Compare average Monetary value between high-value and low-value customers
median_monetary = rfm_df['Monetary'].median()
high_value_customers = rfm_df[rfm_df['Monetary'] > median_monetary]['Monetary']
low_value_customers = rfm_df[rfm_df['Monetary'] <= median_monetary]['Monetary']

# Perform an independent t-test
t_stat, p_value = stats.ttest_ind(high_value_customers, low_value_customers)

# Display T-test results
print("\nT-test for difference in average Monetary value between high and low-value customers:")
print(f"T-statistic: {t_stat:.2f}")
print(f"P-value: {p_value:.4f}")

if p_value < 0.05:
    print("Result: Statistically significant difference between high and low-value customers.")
else:
    print("Result: No statistically significant difference between high and low-value customers.")

# Chi-square test: Test for independence between clusters and Age Groups (if applicable)
if 'Cluster' in rfm_df.columns and 'Age' in merged_df.columns:
    # Create Age groups
    merged_df['Age Group'] = pd.cut(merged_df['Age'], bins=[0, 25, 40, 60, 100], labels=['<25', '25-40', '40-60', '60+'])

    # Create a contingency table
    contingency_table = pd.crosstab(merged_df['Cluster'], merged_df['Age Group'])

    # Perform chi-square test
    chi2_stat, p_val, dof, expected = stats.chi2_contingency(contingency_table)

    # Display Chi-square test results
    print("\nChi-square Test for independence between Clusters and Age Groups:")
    print(f"Chi2 Statistic: {chi2_stat:.2f}")
    print(f"P-value: {p_val:.4f}")

    if p_val < 0.05:
        print("Result: Significant relationship between Clusters and Age Groups.")
    else:
        print("Result: No significant relationship between Clusters and Age Groups.")
